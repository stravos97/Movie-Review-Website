name: CI Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      SYMFONY_ENV: test
      DATABASE_URL: "sqlite:///%kernel.project_dir%/var/test.db"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: pdo, pdo_sqlite, sqlite3, mbstring, intl, json
          ini-values: post_max_size=256M, max_execution_time=120
          coverage: none

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --no-scripts

      - name: Prepare test DB (SQLite)
        run: |
          mkdir -p var
          php bin/console doctrine:schema:create -q

      - name: Run PHPUnit
        run: vendor/bin/phpunit --testdox

      - name: Run CI checks
        run: bash scripts/ci-checks.sh

  build:
    name: Build and Publish Docker image
    runs-on: ubuntu-latest
    needs: [ test ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase repo
        id: meta
        run: |
          echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ steps.meta.outputs.repo }}:latest
            ghcr.io/${{ steps.meta.outputs.repo }}:sha-${{ github.sha }}
          build-args: |
            APP_ENV=prod
            WITH_XDEBUG=false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  compose_smoke:
    name: Docker Compose Smoke Test
    runs-on: ubuntu-latest
    needs: [ build ]
    env:
      APP_DB_USERNAME: sparta_user
      APP_DB_PASSWORD: testpassword123!
      MYSQL_ROOT_PASSWORD: rootpassword123!
      APP_SECRET: test_secret_value
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute lowercase repo
        id: meta
        run: |
          echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Start local stack (web + mysql)
        run: |
          echo "APP_DB_USERNAME=$APP_DB_USERNAME" > .env
          echo "APP_DB_PASSWORD=$APP_DB_PASSWORD" >> .env
          echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD" >> .env
          echo "APP_SECRET=$APP_SECRET" >> .env
          CI_IMAGE=ghcr.io/${{ steps.meta.outputs.repo }}:sha-${{ github.sha }}
          echo "Using image: $CI_IMAGE"
          docker pull "$CI_IMAGE"
          # Create CI override compose to avoid rebuilding the web image
          sed 's#^\([[:space:]]*\)build: \.#\1image: '"$CI_IMAGE"'#' docker-compose.local.yml > docker-compose.ci.yml
          docker compose --env-file .env -f docker-compose.ci.yml up -d

      - name: Wait for web to be healthy
        run: |
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:8080/health >/dev/null; then echo "Web is up"; exit 0; fi
            echo "waiting..."; sleep 2;
          done
          echo "Web did not become ready in time"; exit 1

      - name: Smoke checks
        run: |
          curl -fsS http://localhost:8080/health | jq .
          curl -fsS "http://localhost:8080/search?q=test" | head -n 5

      - name: Compose down
        if: always()
        run: docker compose --env-file .env -f docker-compose.local.yml down -v
